# -*- coding: utf-8 -*-
"""Exercise_Claim Study

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gDOXbG4sANQn6s73uZUYpk4I-5TO7M2W
"""

#import full set of data
import pandas as pd
df = pd.read_excel('Claim Study.xlsx')

print("Data info:",df.info())
print("Shape of data : \n",df.shape)
print("\n First 5 rows: ", df.head())

# Inset new column named "Claim Year" based on admission date
df['Claim_Year'] = pd.DatetimeIndex(df['ADMISSION_DATE']).year
df.info()

# Commented out IPython magic to ensure Python compatibility.
#visualisation of number of claims per year using pie chart
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

#add colors
colors = ['#FAEBD7','#00FFFF','#FFA54F','#76EE00','#00EEEE','#FFD700']


df.groupby('Claim_Year').size().plot(kind = 'pie', colors=colors,autopct = '%.1f%%', label = 'Number of Claims Per Year',shadow=True, startangle=90);
plt.tight_layout()
plt.show()

#visualisation of number of claims per year using histogram
sns.countplot(x = df['Claim_Year']).set(title = 'Number of Claims per year', 
                                       xlabel = 'Year', 
                                       ylabel = 'Number of Claims');

#visualisation of number of claims by product per year using histogram
def aggregate(rows,columns,df):
    column_keys = df[columns].unique()
    row_keys = df[rows].unique()

    agg = { key : [ len(df[(df[rows]==value) & (df[columns]==key)]) for value in row_keys]
               for key in column_keys }

    aggdf = pd.DataFrame(agg,index = row_keys)
    aggdf.index.rename(rows,inplace=True)

    return aggdf

aggregate('Claim_Year','Product',df).plot(kind='bar',stacked=True)

sns.lineplot(data = df, x = 'Claim_Year', y = 'PAID_TO_CLAIMANT');

sns.pairplot(df)

sns.countplot(x = df['Product']).set(title = 'Number of Claims per product', 
                                       xlabel = 'Product', 
                                       ylabel = 'Number of Claims');

#Remove duplicate claim status. To find out what type of claim status available. 
CURR_CLAIMS_STATUS = df["CURR_CLAIMS_STATUS"].values.tolist()
print("CURR_CLAIMS_STATUS = ", CURR_CLAIMS_STATUS)

type_of_claim_status = []

[type_of_claim_status.append(remove_duplicate) for remove_duplicate in CURR_CLAIMS_STATUS if remove_duplicate not in type_of_claim_status]

print("Type of claim status:", type_of_claim_status)

#Return SME & Inpatient claim data with claim status of "PAID" only
df2=df.loc[( (df['CURR_CLAIMS_STATUS']== "PAID" ) & (df['Product']!="Outpatient") )]
print(df2)
df2.shape

#Find highest paid claim in SME and Inpatient policy
print ("x =PAID_TO_CLAIMANT")
x = "PAID_TO_CLAIMANT"
max_x = df2.loc[df2[x].idxmax()]
print ("Maximum value of paid claim and its corresponding row values:\n", max_x)

#Find lowest paid claim in SME and Inpatient policy
print ("x =PAID_TO_CLAIMANT")
x = "PAID_TO_CLAIMANT"
min_x = df2.loc[df2[x].idxmin()]
print ("Minimum value of paid claim and its corresponding row values:\n", min_x)

#Return inpatient claims with status of paid
df3=df.loc[( (df['CURR_CLAIMS_STATUS']== "PAID" ) & (df['CLAIM_PREPOSTIP']=="IP"))]
print(df3)
df3.shape

print("Analysis of inpatient claims with status of paid: \n")

#visualization using sweetviz
# importing sweetviz library
!pip install sweetviz
import sweetviz as sv

#analyzing the dataset
advert_report = sv.analyze(df)

#display the report
advert_report.show_notebook()

#Return Outpatient claim data with claim status of "PAID" only
df4=df.loc[( (df['CURR_CLAIMS_STATUS']=="PAID" ) & (df['Product']=="Outpatient") )]
df4.shape

df4.describe()

df4.corr()['CLAIM_TOT_BILL_AMT']

#plt.plot(df4.index, df4['CLAIM_TOT_BILL_AMT'])
import math
import matplotlib.pyplot as plt
plt.plot(df4['Claim_Year'], df4['CLAIM_TOT_BILL_AMT'])
plt.title('Incurred Claim VS Year')
plt.ylabel('Claim Amount');
plt.show()

# Import libraries
import matplotlib.pyplot as plt
import numpy as np
 

 
# Creating plot
plt.boxplot(df4['CLAIM_TOT_BILL_AMT'])
 
# show plot
plt.show()

#visualization using sweetviz
# importing sweetviz library
!pip install sweetviz
import sweetviz as sv

#analyzing the dataset
advert_report = sv.analyze(df4)

#display the report
advert_report.show_notebook()

#Find any outlier in outpatient paid claims
import pandas as pd
import numpy as np

q1=np.percentile(df4.CLAIM_TOT_BILL_AMT,25)
print("q1=",q1 )
q2=np.percentile(df4.CLAIM_TOT_BILL_AMT,50)
print("q2=",q2 )
q3=np.percentile(df4.CLAIM_TOT_BILL_AMT,75)
print("q3=",q3 )


IQR = q3 - q1
Minimum = q1 - 1.5*IQR
print(Minimum)
Maximum = q3 + 1.5*IQR
print(Maximum)

Outlier_of_incurred_claim = df4.CLAIM_TOT_BILL_AMT[(df4.CLAIM_TOT_BILL_AMT < Minimum) | (df4.CLAIM_TOT_BILL_AMT > Maximum)]

print("How Many Outlier in Incurred Claim? : " , Outlier_of_incurred_claim.count())

#df4['Outlier'] = "No"
#df4.loc[(df4["CLAIM_TOT_BILL_AMT"] < (q1 - 1.5*IQR)) |(df4["CLAIM_TOT_BILL_AMT"] > (q3 + 1.5*IQR))] = "Yes"

#df[“column_name”] = np.where(df[“column_name”]==”some_value”, value_if_true, value_if_false)
df4['Outlier'] = np.where((df4["CLAIM_TOT_BILL_AMT"] < Minimum) |(df4["CLAIM_TOT_BILL_AMT"] > Maximum), "Yes", "No")

pd.set_option('display.max_rows', None)
df4.head(500)

df4.groupby('Outlier').count()

#Return Outpatient claim data with claim status of "PAID" only

#df4[df4["Outlier"]=="Yes"]
df5=df4.loc[(df4['Outlier']=="Yes")]
#df5.head()

#df6 = df5.groupby(["HOSPITAL_NAME"]["Outlier"].count().nlargest(10)
#df6 = df5.groupby(["HOSPITAL_NAME"]["Outlier"].count().nlargest(10)
df6 = df5.groupby(['HOSPITAL_NAME'])['Outlier'].count().reset_index(name='Number of outlier').sort_values(['Number of outlier'], ascending=False) .head(10)    
df6

#visualization using sweetviz
# importing sweetviz library
!pip install sweetviz
import sweetviz as sv

#analyzing the dataset
advert_report = sv.analyze(df5)

#display the report
advert_report.show_notebook()